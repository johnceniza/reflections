When would you want to use a remote repository rather than keeping all your work local?

When you want to collaborate with other people or you want to open source your projects.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

Pulling changes also pulls all commits. And moves the tip of branch to the most recent one. You may not want to do this if you were in the middle of something. It may overwrite your work on your local repo.

Describe the differences between forks, clones, and branches. When would you use one instead of another?

Forks - use when cloning from one GitHub account to your own GitHub account
Clones - use when copying repo from github to local or local to local, or anywhere to anywhere really
Branches - use when either fixing a bug, creating large feature, or for any reason you don’t want to do it in your master branch (which should be used for working, final production code)

What is the benefit of having a copy of the last known state of the remote stored locally?

This way, we can work on our file offline and still be able to compare differences and attempt to merge to see if any conflicts would arise. In a way, this makes us more efficient and less reliant on internet connection.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

To collaborate without using Git or GitHub would be a nightmare. You’d have to manually document all code changes and explain what you did and why you did that. Then you have to manually merge all code changes to your “master” codebase. I can’t think of one thing that would be easier except the fact that it might be more “intuitive” since you don’t have to learn all the Git and GitHub terminology and processes for doing things.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

It’s highly subjective but I think it would be best practice to create a new branch whenever you plan on changing more than a few lines of code. For example, when fixing bugs or adding new features or changing the logic of a function. When in doubt branch it out! This is probably the safest way to doing so. Working off master is very quick and efficient but it can cause a lot of headaches when collaborating with others. So always be mindful of branching out. Context branching, context switching. Whatever word you want to use for it. I’d lean towards branching whenever I’m in doubt.